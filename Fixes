import sys
import time
import importlib.util
from pathlib import Path
import gc
from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget
from PyQt6.QtCore import QTimer, QObject
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import subprocess

class QtAppLauncher:
    def __init__(self, app_path):
        """Initialize the launcher with the path to the Qt application"""
        self.app_path = Path(app_path).resolve()
        self.project_root = self._find_project_root()
        self._setup_python_path()
        self._install_requirements()
        
        # Start fresh QApplication
        self._start_new_application()

    def _find_project_root(self):
        """Find project root by looking for requirements.txt"""
        current = self.app_path.parent
        while current != current.parent:
            if (current / 'requirements.txt').exists():
                return current
            current = current.parent
        return self.app_path.parent

    def _setup_python_path(self):
        """Add project root to Python path"""
        if str(self.project_root) not in sys.path:
            sys.path.insert(0, str(self.project_root))

    def _install_requirements(self):
        """Install project requirements"""
        requirements_file = self.project_root / 'requirements.txt'
        if requirements_file.exists():
            try:
                subprocess.check_call([
                    sys.executable,
                    '-m',
                    'pip',
                    'install',
                    '-r',
                    str(requirements_file)
                ])
            except subprocess.CalledProcessError as e:
                print(f"Error installing requirements: {e}")

    def _start_new_application(self):
        """Start a fresh QApplication instance"""
        if QApplication.instance():
            QApplication.instance().quit()
            QApplication.instance().deleteLater()
        self.app = QApplication(sys.argv)

    def run(self):
        """Run the application with hot reload"""
        self.window_manager = WindowManager(self.app_path, self.project_root)
        return self.app.exec()

class WindowManager(QObject):
    def __init__(self, app_path, project_root):
        super().__init__()
        self.app_path = app_path
        self.project_root = project_root
        self.current_window = None
        self.module = None
        
        # Set up file watcher
        self._setup_file_watcher()
        
        # Initial load
        QTimer.singleShot(100, self.reload_window)

    def _setup_file_watcher(self):
        """Set up file system watcher for hot reload"""
        class FileChangeHandler(FileSystemEventHandler):
            def __init__(self, callback):
                self.callback = callback
                self.last_reload = 0
                self.reload_timer = QTimer()
                self.reload_timer.setSingleShot(True)
                self.reload_timer.timeout.connect(self.trigger_reload)

            def trigger_reload(self):
                self.callback()

            def on_modified(self, event):
                if event.src_path.endswith('.py'):
                    current_time = time.time()
                    if current_time - self.last_reload > 1.0:  # 1 second cooldown
                        self.last_reload = current_time
                        # Schedule reload with delay
                        self.reload_timer.start(300)  # 300ms delay

        self.observer = Observer()
        event_handler = FileChangeHandler(self.reload_window)
        self.observer.schedule(event_handler, str(self.project_root), recursive=True)
        self.observer.start()

    def _cleanup_current_window(self):
        """Clean up the current window instance"""
        if self.current_window is not None:
            try:
                # Hide window first
                self.current_window.hide()
                
                # Remove all child widgets
                for child in self.current_window.findChildren((QWidget, QObject)):
                    try:
                        child.setParent(None)
                        child.deleteLater()
                    except:
                        pass

                # Clean up window
                self.current_window.setParent(None)
                self.current_window.deleteLater()
                self.current_window = None
                
                # Process events and force GC
                QApplication.processEvents()
                gc.collect()
                
            except Exception as e:
                print(f"Error during window cleanup: {e}")
                self.current_window = None

    def _cleanup_modules(self):
        """Clean up project-related modules"""
        project_path_str = str(self.project_root)
        modules_to_remove = [
            name for name, module in list(sys.modules.items())
            if hasattr(module, '__file__') 
            and module.__file__ 
            and str(module.__file__).startswith(project_path_str)
        ]
        
        for module_name in modules_to_remove:
            try:
                del sys.modules[module_name]
            except KeyError:
                pass
        
        gc.collect()

    def _load_module(self):
        """Load the application module"""
        try:
            module_name = self.app_path.stem
            spec = importlib.util.spec_from_file_location(module_name, self.app_path)
            if spec is None:
                raise ImportError(f"Could not load module: {self.app_path}")

            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
            spec.loader.exec_module(module)
            return module
            
        except Exception as e:
            print(f"Error loading module: {e}")
            if module_name in sys.modules:
                del sys.modules[module_name]
            return None

    def _find_window_class(self, module):
        """Find the main window class in the module"""
        for attr_name in dir(module):
            attr = getattr(module, attr_name)
            if isinstance(attr, type) and (issubclass(attr, QMainWindow) or issubclass(attr, QWidget)):
                if attr not in (QMainWindow, QWidget):
                    return attr
        return None

    def reload_window(self):
        """Reload the application window"""
        try:
            # Clean up existing window and modules
            self._cleanup_current_window()
            self._cleanup_modules()
            
            # Load module
            self.module = self._load_module()
            if not self.module:
                return
            
            # Find window class
            window_class = self._find_window_class(self.module)
            if not window_class:
                print("No window class found")
                return
            
            # Create new window instance
            def create_window():
                try:
                    self.current_window = window_class()
                    # Show window in next event loop iteration
                    QTimer.singleShot(0, lambda: self._show_window())
                except Exception as e:
                    print(f"Error creating window: {e}")
            
            # Schedule window creation
            QTimer.singleShot(100, create_window)
            
        except Exception as e:
            print(f"Error reloading window: {e}")
            import traceback
            traceback.print_exc()

    def _show_window(self):
        """Show the window safely"""
        try:
            if self.current_window:
                self.current_window.show()
                self.current_window.raise_()
                self.current_window.activateWindow()
        except Exception as e:
            print(f"Error showing window: {e}")

def main():
    if len(sys.argv) != 2:
        print("Usage: python launcher.py <path_to_qt_app.py>")
        return 1

    app_path = sys.argv[1]
    launcher = QtAppLauncher(app_path)
    return launcher.run()

if __name__ == "__main__":
    sys.exit(main())
